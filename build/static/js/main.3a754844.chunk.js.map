{"version":3,"sources":["components/Product.js","App.js","serviceWorker.js","index.js"],"names":["Product","onAddToCart","alert","props","children","price","console","log","className","src","this","image","alt","type","onClick","Component","App","onAddProduct","refs","name","value","elements","id","status","map","product","index","result","key","href","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAiCeA,EA/Bf,4MAEEC,YAAc,WACZC,MAAM,EAAKC,MAAMC,SAAW,MAAQ,EAAKD,MAAME,OAC/CC,QAAQC,IAAI,EAAKJ,MAAMC,SAAW,MAAQ,EAAKD,MAAME,QAJzD,uDAQI,OACE,6BACE,yBAAKG,UAAU,uCACb,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,KAAKP,MAAMQ,MAAOC,IAAI,KAChC,yBAAKJ,UAAU,WACb,4BAAKE,KAAKP,MAAMC,UAChB,2BACGM,KAAKP,MAAME,MADd,aAGA,2BACE,4BAAQQ,KAAK,SAASL,UAAU,kBAAkBM,QAAUJ,KAAKT,aAAjE,qBAnBhB,GAA6Bc,aCiGdC,EAhGf,4MAKEC,aAAe,WACbX,QAAQC,IAAI,EAAKW,KAAKC,KAAKC,QAN/B,wDAEId,QAAQC,IAAI,qCAFhB,+BAUI,IAwBIc,EAxBa,CACf,CACEC,GAAI,EACJH,KAAM,2BACNd,MAAO,KACPM,MAAO,wFACPY,QAAQ,GAGV,CACED,GAAI,EACJH,KAAM,oBACNd,MAAO,IACPM,MAAO,oFACPY,QAAQ,GAEV,CACED,GAAI,EACJH,KAAM,WACNd,MAAO,IACPM,MAAO,qEACPY,QAAQ,IAGYC,KAAI,SAACC,EAASC,GACpC,IAAIC,EAAS,GAYb,OAXIF,EAAQF,SACVI,EACE,kBAAC,EAAD,CACEC,IAAKF,EACLrB,MAAOoB,EAAQpB,MACfM,MAAOc,EAAQd,OAEdc,EAAQN,OAIRQ,KAET,OACE,kBAAC,WAAD,KACE,yBAAKnB,UAAU,yBACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,eAAeqB,KAAK,KAAjC,WAGJ,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,2CAEb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eAAd,+BAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,4DACA,2BAAOK,KAAK,OAAOL,UAAU,eAAesB,IAAI,UAGlD,4BAAQjB,KAAK,SAASL,UAAU,kBAAkBM,QAASJ,KAAKO,cAAhE,eAUN,yBAAKT,UAAU,2CACZa,GAEH,yBAAKb,UAAU,2CACb,4BAAQK,KAAK,SAASL,UAAU,kBAAkBM,QAASJ,KAAKI,SAAhE,qBArFd,GAAyBC,aCSLgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.3a754844.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Product extends Component {\r\n\r\n  onAddToCart = () => {\r\n    alert(this.props.children + ' - ' + this.props.price);\r\n    console.log(this.props.children + ' - ' + this.props.price);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n          <div className=\"thumbnail\">\r\n            <img src={this.props.image} alt=\"\" />\r\n            <div className=\"caption\">\r\n              <h3>{this.props.children}</h3>\r\n              <p>\r\n                {this.props.price} VNĐ\r\n              </p>\r\n              <p>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={ this.onAddToCart }>\r\n                  Mua ngay\r\n                </button>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Product\r\n","import React, { Component, Fragment } from 'react'\nimport Product from './components/Product'\n\nexport class App extends Component {\n  onClick() {\n    console.log('Đây là app component')\n  }\n\n  onAddProduct = () => {\n    console.log(this.refs.name.value);\n  }\n\n  render() {\n    const products = [\n      {\n        id: 1,\n        name: 'Apple Iphone 6 Plus 16GB',\n        price: 15000000,\n        image: 'https://cdn.tgdd.vn/Products/Images/42/69783/iphone-6-plus-16gb-64gb128gb-400x450.png',\n        status: true,\n      },\n\n      {\n        id: 2,\n        name: 'Samsung Galaxy S6',\n        price: 8000000,\n        image: 'https://cdn.tgdd.vn/Products/Images/42/71081/samsung-galaxy-s6-edge-4-400x460.png',\n        status: true,\n      },\n      {\n        id: 1,\n        name: 'Oppo F1s',\n        price: 5000000,\n        image: 'https://didongthongminh.vn/upload_images/2017/10/oppo-f1s-gold.png',\n        status: true,\n      },\n    ];\n    let elements = products.map((product, index) => {\n      let result = '';\n      if (product.status) {\n        result = (\n          <Product\n            key={index}\n            price={product.price}\n            image={product.image}\n          >\n            {product.name}\n          </Product>\n        )\n      };\n      return result;\n    });\n    return (\n      <Fragment>\n        <nav className=\"navbar navbar-inverse\">\n          <div className=\"container-fluid\">\n            <a className=\"navbar-brand\" href=\"/\">Props</a>\n          </div>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n\n              <div className=\"panel panel-danger\">\n                <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">Thêm Sản Phẩm</h3>\n                </div>\n                <div className=\"panel-body\">\n                  <div className=\"form-group\">\n                    <label>Tên Sản Phẩm</label>\n                    <input type=\"text\" className=\"form-control\" ref=\"name\" />\n                  </div>\n\n                  <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onAddProduct}>\n                    Lưu\n                  </button>\n\n                </div>\n              </div>\n\n\n            </div>\n\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              {elements}\n            </div>\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              <button type=\"button\" className=\"btn btn-warning\" onClick={this.onClick}>\n                Click Me!\n              </button>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}